#!/usr/bin/env node

var IdeaContainer = require("../lib")
  , Debug = require("bug-killer")
  , Table = require("le-table")
  , Couleurs = require("couleurs")(true)
  ;

// Defaults
Debug.config.displayDate = false;
Debug.config.logLevel = 4;
Table.defaults.marks = {
    nw: "┌"
  , n:  "─"
  , ne: "┐"
  , e:  "│"
  , se: "┘"
  , s:  "─"
  , sw: "└"
  , w:  "│"
  , b: " "
  , mt: "┬"
  , ml: "├"
  , mr: "┤"
  , mb: "┴"
  , mm: "┼"
};

function display(arr) {
    if (!arr.length) {
        return Debug.log("No ideas fetched.", "info");
    }
    var tbl = new Table()
      , i = 0
      , c = 0
      ;

    tbl.addRow([
        "Id".bold(), "Date".bold(), "State".bold(), "Idea".bold()
    ]);

    for (; i < arr.length; ++i) {
        c = arr[i];
        tbl.addRow([i + 1, c.date, c.state, c.idea]);
    }

    console.log(tbl.toString());
}

var idea = new IdeaContainer(function (err) {
    if (err) { return Debug.log(err, "error"); }
    var commands = {
        create: function (callback) {
            idea.create(process.argv[3], function (err) {
                if (err) { return callback(err); }
                callback("Idea was added.");
            });
            idea.save();
        }
      , list: function (callback) {
            idea.filter({}, callback);
        }
      , filter: function (callback) {
            try {
                var filter = JSON.parse(process.argv[3] || "{ \"state\": \"OPEN\" }");
            } catch (e) {
                return callback("Cannot parse the filter.", "error");
            }
            idea.filter(filter, callback);
        }
      , solve: function (callback) {
            idea.solve(process.argv[3], function () {
                if (err) { return callback(err); }
                callback("Idea was solved.");
            });
            idea.save();
        }
      , help: function () {
            console.log(require("./docs/help"));
        }
    };

    if (!commands[process.argv[2]]) {
        process.argv[2] = "filter";
    }

    commands[process.argv[2]](function (err, res) {
        if (err) {
            return Debug.log(err, "error");
        }

        if (typeof res === "string") {
            return Debug.log(res, "info");
        }

        display(res);
    });
});
